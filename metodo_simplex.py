import numpy as np
import sys

class SimplexSolver:
    def __init__(self):
        self.iteration = 0
        
    def print_tableau(self, tableau, basic_vars, n_original_vars, iteration_msg=""):
        """Imprime o quadro simplex de forma formatada."""
        m, n = tableau.shape
        m -= 1  # Excluir linha da fun√ß√£o objetivo
        
        print(f"\n{'='*80}")
        if iteration_msg:
            print(f"üîÑ {iteration_msg}")
        print(f"üìä QUADRO SIMPLEX - Itera√ß√£o {self.iteration}")
        print(f"{'='*80}")
        
        # Cabe√ßalho
        header = "Base |"
        for i in range(n_original_vars):
            header += f"   x{i+1}   |"
        for i in range(m):
            header += f"   s{i+1}   |"
        header += "    RHS   |"
        print(header)
        print("-" * len(header))
        
        # Linhas das restri√ß√µes
        for i in range(m):
            # Constr√≥i o nome da vari√°vel na base
            if basic_vars[i] >= n_original_vars:
                var_name = f"s{basic_vars[i] - n_original_vars + 1}"
            else:
                var_name = f"x{basic_vars[i] + 1}"
            
            row = f" {var_name:<4}|" # Alinha o nome da vari√°vel

            for j in range(n-1):
                row += f" {tableau[i, j]:6.2f} |"
            row += f" {tableau[i, -1]:8.2f} |"
            print(row)
        
        # Linha Z
        print("-" * len(header))
        row = "  Z   |"
        for j in range(n-1):
            row += f" {tableau[-1, j]:6.2f} |"
        row += f" {tableau[-1, -1]:8.2f} |"
        print(row)
        print("="*80)
    
    def get_user_input(self):
        """Coleta os dados do problema do usu√°rio."""
        print("\n" + "="*80)
        print("‚äô SOLUCIONADOR SIMPLEX INTERATIVO ‚äô")
        print("="*80)

        problem_type = ''
        while problem_type not in ['1', '2']:
            print("\nüéØ TIPO DO PROBLEMA:")
            print("  1. Maximiza√ß√£o (com restri√ß√µes ‚â§)")
            print("  2. Minimiza√ß√£o (com restri√ß√µes ‚â•)")
            problem_type = input("  Escolha o tipo de problema (1 ou 2): ")
            if problem_type not in ['1', '2']:
                print("  ‚ùå Op√ß√£o inv√°lida. Por favor, digite 1 ou 2.")
        
        problem_type = 'max' if problem_type == '1' else 'min'

        print("\nüìù Este programa resolve problemas de Programa√ß√£o Linear no formato:")
        if problem_type == 'max':
            print("   MAXIMIZAR: Z = c‚ÇÅx‚ÇÅ + c‚ÇÇx‚ÇÇ + ... + c‚Çôx‚Çô")
            print("   SUJEITO A: a‚ÇÅ‚ÇÅx‚ÇÅ + a‚ÇÅ‚ÇÇx‚ÇÇ + ... ‚â§ b‚ÇÅ")
        else:
            print("   MINIMIZAR: Z = c‚ÇÅx‚ÇÅ + c‚ÇÇx‚ÇÇ + ... + c‚Çôx‚Çô")
            print("   SUJEITO A: a‚ÇÅ‚ÇÅx‚ÇÅ + a‚ÇÅ‚ÇÇx‚ÇÇ + ... ‚â• b‚ÇÅ")
        
        print("             ...")
        print("             x‚ÇÅ, x‚ÇÇ, ... ‚â• 0")
        
        # N√∫mero de vari√°veis e restri√ß√µes
        print("\nüî¢ DEFININDO O PROBLEMA:")
        n = int(input("  Quantas vari√°veis de decis√£o? "))
        m = int(input("  Quantas restri√ß√µes? "))
        
        # Coeficientes da fun√ß√£o objetivo
        print(f"\nüìà FUN√á√ÉO OBJETIVO ({'Maximizar' if problem_type == 'max' else 'Minimizar'} Z):")
        print(f"  Digite os {n} coeficientes das vari√°veis:")
        C = []
        for i in range(n):
            C.append(float(input(f"  Coeficiente de x{i+1}: ")))
        C = np.array(C)
        
        # Matriz de restri√ß√µes
        print(f"\nüìã RESTRI√á√ïES:")
        A = []
        B = []
        constraint_symbol = '‚â§' if problem_type == 'max' else '‚â•'
        for i in range(m):
            print(f"\n  Restri√ß√£o {i+1}:")
            row = []
            for j in range(n):
                coef = float(input(f"    Coeficiente de x{j+1}: "))
                row.append(coef)
            A.append(row)
            B.append(float(input(f"    Lado direito ({constraint_symbol}): ")))
        
        A = np.array(A)
        B = np.array(B)
        
        return A, B, C, problem_type
    
    def simplex(self, A, B, C, problem_type='max', show_steps=True):
        """
        Resolve problemas de programa√ß√£o linear pelo m√©todo Simplex com explica√ß√µes.
        """
        self.iteration = 0
        m, n = A.shape
        
        print("\n" + "="*80)
        print("üöÄ INICIANDO O M√âTODO SIMPLEX")
        print("="*80)

        if problem_type == 'min':
            # Converte o problema de minimiza√ß√£o para um de maximiza√ß√£o equivalente
            # 1. min Z  ->  max Z' = -Z
            C = -C
            # 2. A*x >= B  -> -A*x <= -B
            A = -A
            B = -B
            print("   Convertendo para um problema de Maximiza√ß√£o (‚â§) equivalente:")
            print("   1. Fun√ß√£o Objetivo: Coeficientes multiplicados por -1.")
            print("   2. Restri√ß√µes: Coeficientes e RHS multiplicados por -1.")

        # FASE 1: Construir a tabela inicial
        print("\nüìå FASE 1: CONSTRU√á√ÉO DO QUADRO INICIAL")
        print("  ‚Ä¢ Adicionando vari√°veis de folga para converter ‚â§ em =")
        print("  ‚Ä¢ Montando o quadro simplex inicial")
        
        tableau = np.zeros((m + 1, n + m + 1))
        tableau[:m, :n] = A
        tableau[:m, n:n + m] = np.eye(m)
        tableau[:m, -1] = B
        tableau[-1, :n] = -C
        
        basic_vars = list(range(n, n + m))
        
        if show_steps:
            self.print_tableau(tableau, basic_vars, n, "Quadro inicial com vari√°veis de folga")
            input("\n‚è∏Ô∏è  Pressione Enter para continuar...")
        
        # FASE 2: Itera√ß√µes do Simplex
        print("\nüìå FASE 2: ITERA√á√ïES DO M√âTODO SIMPLEX")
        
        while True:
            self.iteration += 1
            
            # Verificar otimalidade (toler√¢ncia para erros de ponto flutuante)
            if np.all(tableau[-1, :-1] >= -1e-9):
                print("\n‚úÖ SOLU√á√ÉO √ìTIMA ENCONTRADA!")
                print("  Todos os coeficientes da linha Z s√£o n√£o-negativos.")
                break
            
            # Escolher coluna piv√¥
            pivot_col = np.argmin(tableau[-1, :-1])
            print(f"\nüîç Itera√ß√£o {self.iteration}:")
            print(f"  ‚Ä¢ Coluna piv√¥: {pivot_col + 1} (menor valor negativo na linha Z: {tableau[-1, pivot_col]:.2f})")
            
            # Verificar se √© ilimitado
            if np.all(tableau[:-1, pivot_col] <= 1e-9):
                print("\n‚ùå PROBLEMA ILIMITADO!")
                print("  Todos os coeficientes na coluna piv√¥ s√£o n√£o-positivos.")
                return {"status": "unbounded", "solution": None, "optimal_value": None}
            
            # Escolher linha piv√¥
            ratios = []
            print("\n  ‚Ä¢ Calculando raz√µes (RHS / coef. coluna piv√¥):")
            for i in range(m):
                if tableau[i, pivot_col] > 1e-9:
                    ratio = tableau[i, -1] / tableau[i, pivot_col]
                    ratios.append(ratio)
                    print(f"    Linha {i+1}: {tableau[i, -1]:.2f} / {tableau[i, pivot_col]:.2f} = {ratio:.2f}")
                else:
                    ratios.append(np.inf)
                    print(f"    Linha {i+1}: -- (coeficiente ‚â§ 0)")
            
            pivot_row = np.argmin(ratios)
            print(f"\n  ‚Ä¢ Linha piv√¥: {pivot_row + 1} (menor raz√£o positiva: {ratios[pivot_row]:.2f})")
            pivot_element = tableau[pivot_row, pivot_col]
            print(f"  ‚Ä¢ Elemento piv√¥: {pivot_element:.2f}")
            
            # Opera√ß√£o de pivoteamento
            print("\n  ‚Ä¢ Realizando opera√ß√£o de pivoteamento:")
            print(f"    1. Normalizando a linha piv√¥ (Linha {pivot_row + 1} /= {pivot_element:.2f})")
            tableau[pivot_row, :] /= pivot_element
            
            print("    2. Zerando outros elementos da coluna piv√¥")
            for i in range(m + 1):
                if i != pivot_row:
                    multiplier = tableau[i, pivot_col]
                    if abs(multiplier) > 1e-9:
                        print(f"       Linha {i+1 if i < m else 'Z'} -= {multiplier:.2f} √ó (Nova Linha {pivot_row + 1})")
                    tableau[i, :] -= multiplier * tableau[pivot_row, :]
            
            # Atualizar vari√°veis b√°sicas
            basic_vars[pivot_row] = pivot_col
            
            if show_steps:
                self.print_tableau(tableau, basic_vars, n, f"Ap√≥s pivoteamento na linha {pivot_row+1}, coluna {pivot_col+1}")
                input("\n‚è∏Ô∏è  Pressione Enter para continuar...")
        
        # FASE 3: Extrair solu√ß√£o
        print("\nüìå FASE 3: EXTRA√á√ÉO DA SOLU√á√ÉO")
        
        solution = np.zeros(n)
        print("\n  ‚Ä¢ Valores das vari√°veis de decis√£o:")
        for i, var_index in enumerate(basic_vars):
            if var_index < n:
                solution[var_index] = tableau[i, -1]
                print(f"    x{var_index+1} = {tableau[i, -1]:.2f} (vari√°vel b√°sica)")
        
        for i in range(n):
            if i not in basic_vars:
                print(f"    x{i+1} = 0.00 (vari√°vel n√£o-b√°sica)")
        
        optimal_value = tableau[-1, -1]

        if problem_type == 'min':
            optimal_value = -optimal_value
            print(f"\n  ‚Ä¢ Valor √≥timo da fun√ß√£o convertida (Z'): {tableau[-1, -1]:.2f}")
            print(f"  ‚Ä¢ Valor M√çNIMO final (Z = -Z'): {optimal_value:.2f}")
        else:
            print(f"\n  ‚Ä¢ Valor M√ÅXIMO da fun√ß√£o objetivo: Z = {optimal_value:.2f}")
        
        return {"status": "optimal", "solution": solution, "optimal_value": optimal_value}
    
    def run_example(self):
        """Executa um exemplo pr√©-definido."""
        print("\nüìö EXEMPLO DEMONSTRATIVO (MAXIMIZA√á√ÉO)")
        print("  Problema: Maximizar Z = 3x‚ÇÅ + 2x‚ÇÇ")
        print("  Sujeito a: 2x‚ÇÅ + x‚ÇÇ ‚â§ 20")
        print("             x‚ÇÅ + 2x‚ÇÇ ‚â§ 20")
        print("             x‚ÇÅ, x‚ÇÇ ‚â• 0")
        
        A = np.array([[2, 1], [1, 2]])
        B = np.array([20, 20])
        C = np.array([3, 2])
        
        return self.simplex(A, B, C, problem_type='max')
    
    def verify_solution(self, A, B, C, solution, problem_type):
        """Verifica se a solu√ß√£o satisfaz todas as restri√ß√µes originais."""
        print("\nüîç VERIFICA√á√ÉO DA SOLU√á√ÉO (com dados originais):")
        
        constraint_symbol = '‚â§' if problem_type == 'max' else '‚â•'
        print(f"  ‚Ä¢ Verificando restri√ß√µes ({constraint_symbol}):")
        
        for i in range(len(B)):
            lhs = np.dot(A[i], solution)
            if problem_type == 'max':
                is_ok = lhs <= B[i] + 1e-5
            else: # min
                is_ok = lhs >= B[i] - 1e-5
            
            print(f"    Restri√ß√£o {i+1}: {lhs:.2f} {constraint_symbol} {B[i]:.2f} ", end="")
            print("‚úì" if is_ok else "‚úó")
        
        print("  ‚Ä¢ Verificando n√£o-negatividade:")
        for i, val in enumerate(solution):
            is_ok = val >= -1e-5
            print(f"    x{i+1} = {val:.2f} ‚â• 0 ", end="")
            print("‚úì" if is_ok else "‚úó")
        
        z_value = np.dot(C, solution)
        print(f"\n  ‚Ä¢ Valor da fun√ß√£o objetivo com a solu√ß√£o encontrada: Z = {z_value:.2f}")


def main():
    solver = SimplexSolver()
    
    while True:
        print("\n" + "="*80)
        print("üìä MENU PRINCIPAL")
        print("="*80)
        print("1. Resolver novo problema")
        print("2. Executar exemplo demonstrativo (Maximiza√ß√£o)")
        print("3. Sair")
        
        choice = input("\nEscolha uma op√ß√£o (1-3): ")
        
        if choice == '1':
            try:
                A, B, C, problem_type = solver.get_user_input()
                # Salva os dados originais para a verifica√ß√£o final
                original_A, original_B, original_C = A.copy(), B.copy(), C.copy()
                
                result = solver.simplex(A, B, C, problem_type)
                
                if result["status"] == "optimal":
                    print("\n" + "="*80)
                    print("üéâ RESUMO DA SOLU√á√ÉO √ìTIMA")
                    print("="*80)
                    solution_str = ", ".join([f"x{i+1}={val:.2f}" for i, val in enumerate(result['solution'])])
                    print(f"Solu√ß√£o √≥tima: [ {solution_str} ]")
                    print(f"Valor {'M√≠nimo' if problem_type == 'min' else 'M√°ximo'}: Z = {result['optimal_value']:.2f}")
                    
                    solver.verify_solution(original_A, original_B, original_C, result['solution'], problem_type)
            
            except ValueError:
                print("\n‚ùå Erro: Por favor, insira valores num√©ricos v√°lidos.")
            except Exception as e:
                print(f"\n‚ùå Erro inesperado: {e}")
        
        elif choice == '2':
            result = solver.run_example()
            if result["status"] == "optimal":
                A = np.array([[2, 1], [1, 2]])
                B = np.array([20, 20])
                C = np.array([3, 2])
                solver.verify_solution(A, B, C, result['solution'], 'max')
        
        elif choice == '3':
            print("\nüëã Obrigado por usar o Solucionador Simplex!")
            break
        
        else:
            print("\n‚ùå Op√ß√£o inv√°lida. Por favor, escolha 1, 2 ou 3.")

if __name__ == "__main__":
    main()
